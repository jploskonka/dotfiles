" Use Vim settings, rather then Vi settings. This setting must be as early as
" possible, as it has side effects.
set nocompatible

" load Vundle & plugins
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

filetype plugin indent on

" Leader
let mapleader = " "

let &t_Co=256

set background=dark
colorscheme base16-default

set hidden
set backspace=2   " Backspace deletes like most programs in insert mode
set nobackup
set nowritebackup
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set history=50
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set laststatus=2  " Always display the status line
set autowrite     " Automatically :write before running commands
set autoread
set nowrap        " dont wrap words
set scrolloff=10
set mouse=c       " turn off mouse
set hlsearch      " highlight search results
set textwidth=0
set colorcolumn=0
set smartindent
set ignorecase
set smartcase

" wildmenu
set wildmenu
set wildmode=full:longest,full

" Whitespace
set list
set listchars=tab:>.,trail:.,extends:\#,nbsp:.

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif


augroup vimrcEx
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile Appraisals set filetype=ruby
  autocmd BufRead,BufNewFile *.md set filetype=markdown

  " Enable spellchecking for Markdown
  autocmd FileType markdown setlocal spell

  " Automatically wrap at 80 characters for Markdown
  autocmd BufRead,BufNewFile *.md setlocal textwidth=80

  " Allow stylesheets to autocomplete hyphenated words
  autocmd FileType css,scss,sass,html,haml setlocal iskeyword+=-

  " set tab width for Go Lang
  autocmd FileType go setlocal shiftwidth=8 tabstop=8


augroup END


" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" CTRL P
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
" let g:ctrlp_use_caching = 1
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$|\.yardoc\|vendor/bundle|public$|log\|tmp$',
  \ 'file': '\.so$\|\.dat$|\.DS_Store$|\.jpg$',
  \ }


" get rid of last search highlight
nnoremap <CR> :noh<CR>

" Line numbers
set number
set numberwidth=5

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Always use vertical diffs
set diffopt+=vertical

" insert binding.pry easily
inoremap <c-a> require 'pry'; binding.pry


" line/column highlighting
function! LinePing()
  set cursorline
  redraw
  sleep 50m
  set nocursorline
endfunction

nmap <leader>L :call LinePing()<CR>

let g:airline_powerline_fonts = 1

" easily copy/paste with system clipboard
vnoremap <leader>c "*y
noremap <leader>v "*p

" easier movement around tabs
nnoremap <leader>] gt
nnoremap <leader>[ gT

" splits resize
nnoremap <leader>. 20<C-w>>
nnoremap <leader>, 20<C-w><
nnoremap <leader>= <C-w>=

" Spin calling copied from
" https://github.com/jareks/dotfiles/blob/master/vim/.vimrc
map <leader>s <ESC>:call CallSpin()<CR>
map <leader>f <ESC>:call SetSpinCall(expand("%"), 0)<CR>:call CallSpin()<CR>
map <leader>l <ESC>:call SetSpinCall(expand("%"), line("."))<CR>:call CallSpin()<CR>

function! SetSpinCall(filename, linenum)
  let g:spin_test_file = a:filename
  let g:spin_test_line = a:linenum
endfunction

function! CallSpin()
  if g:spin_test_line
    execute "Dispatch! spin push " . g:spin_test_file . ":" . g:spin_test_line
  else
    execute "Dispatch! spin push " . g:spin_test_file
  endif
endfunction

" Rename current file
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction

map <leader>R :call RenameFile()<CR>

" Ag shortcuts - open Ag in new tab
function! SearchInNewTab()
  let g:word_to_search = expand("<cword>")
  tabe
  execute "Ag " g:word_to_search
endfunction

map <leader>G :call SearchInNewTab()<CR>
map <leader>g :Ag<space><C-r><C-w><CR>
map <leader>a :Ag<space>

" Disable ex mode
map Q <NOP>
" Disable manual search
map K <NOP>

map <leader>o :Dispatch! chrome-cli open http://<space>

" Quick mappings for <leader>t
"
" Map <leader>t to activate and reload chrome tab
function! MapForChromeReload()
  let g:active_tab_id = system("chrome-cli info | grep Id | sed 's/Id:\ //'")[:-2]
  execute "map <leader>t :Dispatch! chrome-cli activate -t " g:active_tab_id " && chrome-cli reload<CR>"
endfunction
nmap <leader>2 :call MapForChromeReload()<CR>


" Rails edit shortcuts
map <leader>rc :Econtroller<space>
map <leader>rv :Eview<space>
map <leader>rm :Emodel<space>
map <leader>rh :Ehelper<space>
map <leader>re :Eenvironment<space>
map <leader>ri :Einitializer<space>
map <leader>rx :Rextract<space>


" Reload currently open windows
function! ReloadOpenWindows()
  set noconfirm
  windo e!
  set confirm
endfunction

map <leader>1 :call ReloadOpenWindows()<CR>

" Move line up/down
nnoremap U ddkP
nnoremap Y ddp

function! RandomCSSBackgroundColor()
  let s:css_colors = { 1: 'AliceBlue', 2: 'AntiqueWhite', 3: 'Aqua', 4: 'Aquamarine', 5: 'Azure', 6: 'Beige', 7: 'Bisque', 8: 'Black', 9: 'BlanchedAlmond', 10: 'Blue', 11: 'BlueViolet', 12: 'Brown', 13: 'BurlyWood', 14: 'CadetBlue', 15: 'Chartreuse', 16: 'Chocolate', 17: 'Coral', 18: 'CornflowerBlue', 19: 'Cornsilk', 20: 'Crimson', 21: 'Cyan', 22: 'DarkBlue', 23: 'DarkCyan', 24: 'DarkGoldenRod', 25: 'DarkGray', 26: 'DarkGreen', 27: 'DarkKhaki', 28: 'DarkMagenta', 29: 'DarkOliveGreen', 30: 'DarkOrange', 31: 'DarkOrchid', 32: 'DarkRed', 33: 'DarkSalmon', 34: 'DarkSeaGreen', 35: 'DarkSlateBlue', 36: 'DarkSlateGray', 37: 'DarkTurquoise', 38: 'DarkViolet', 39: 'DeepPink', 40: 'DeepSkyBlue', 41: 'DimGray', 42: 'DodgerBlue', 43: 'FireBrick', 44: 'FloralWhite', 45: 'ForestGreen', 46: 'Fuchsia', 47: 'Gainsboro', 48: 'GhostWhite', 49: 'Gold', 50: 'GoldenRod', 51: 'Gray', 52: 'Green', 53: 'GreenYellow', 54: 'HoneyDew', 55: 'HotPink', 56: 'IndianRed', 57: 'Indigo', 58: 'Ivory', 59: 'Khaki', 60: 'Lavender', 61: 'LavenderBlush', 62: 'LawnGreen', 63: 'LemonChiffon', 64: 'LightBlue', 65: 'LightCoral', 66: 'LightCyan', 67: 'LightGoldenRodYellow', 68: 'LightGray', 69: 'LightGreen', 70: 'LightPink', 71: 'LightSalmon', 72: 'LightSeaGreen', 73: 'LightSkyBlue', 74: 'LightSlateGray', 75: 'LightSteelBlue', 76: 'LightYellow', 77: 'Lime', 78: 'LimeGreen', 79: 'Linen', 80: 'Magenta', 81: 'Maroon', 82: 'MediumAquaMarine', 83: 'MediumBlue', 84: 'MediumOrchid', 85: 'MediumPurple', 86: 'MediumSeaGreen', 87: 'MediumSlateBlue', 88: 'MediumSpringGreen', 89: 'MediumTurquoise', 90: 'MediumVioletRed', 91: 'MidnightBlue', 92: 'MintCream', 93: 'MistyRose', 94: 'Moccasin', 95: 'NavajoWhite', 96: 'Navy', 97: 'OldLace', 98: 'Olive', 99: 'OliveDrab', 100: 'Orange', 101: 'OrangeRed', 102: 'Orchid', 103: 'PaleGoldenRod', 104: 'PaleGreen', 105: 'PaleTurquoise', 106: 'PaleVioletRed', 107: 'PapayaWhip', 108: 'PeachPuff', 109: 'Peru', 110: 'Pink', 111: 'Plum', 112: 'PowderBlue', 113: 'Purple', 114: 'RebeccaPurple', 115: 'Red', 116: 'RosyBrown', 117: 'RoyalBlue', 118: 'SaddleBrown', 119: 'Salmon', 120: 'SandyBrown', 121: 'SeaGreen', 122: 'SeaShell', 123: 'Sienna', 124: 'Silver', 125: 'SkyBlue', 126: 'SlateBlue', 127: 'SlateGray', 128: 'Snow', 129: 'SpringGreen', 130: 'SteelBlue', 131: 'Tan', 132: 'Teal', 133: 'Thistle', 134: 'Tomato', 135: 'Turquoise', 136: 'Violet', 137: 'Wheat', 138: 'White', 139: 'WhiteSmoke', 140: 'Yellow', 141: 'YellowGreen' }
  let s:random = system("ruby -e 'puts Random.rand(1..100)'")[:-2]
  return s:css_colors[s:random]
endfunction
imap <C-K> <C-R>=RandomCSSBackgroundColor()<CR>


" Allow JSX in normal JS files
let g:jsx_ext_required = 0
